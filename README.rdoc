=Scrobbler

Scrobbler is a wrapper for the last.fm audioscrobbler web services (http://www.last.fm/api/). 

Below is just a sampling of how easy this lib is to use.

Please initialize your api key and secret before using the api:

    Scrobbler.lastfm = YAML.load_file('lastfm.yml')

Here is an example lastfm.yml:

    api_key: "API"
    secret_key: "SECRET"    

If you want to use the api in an rails app, you could add an initializer in config/initializers/lastm.rb and load a config/lastfm.yml file.

    rails_root = ENV['RAILS_ROOT'] || File.dirname(__FILE__) + '/../..'
    Scrobbler.lastfm =  YAML.load_file(rails_root + '/config/lastfm.yml')

== Users

	user = Scrobbler::User.new('jnunemaker')

	puts "#{user.username}'s Recent Tracks"
	puts "=" * (user.username.length + 16)
	user.recent_tracks.each { |t| puts t.name }

	puts
	puts

	puts "#{user.username}'s Top Tracks"
	puts "=" * (user.username.length + 13)
	user.top_tracks.each { |t| puts "(#{t.playcount}) #{t.name}" }
	
== Albums
	
	album = Scrobbler::Album.new('Carrie Underwood', 'Some Hearts', :include_info => true)

	puts "Album: #{album.name}"
	puts "Artist: #{album.artist}"
	puts "Reach: #{album.reach}"
	puts "URL: #{album.url}"
	puts "Release Date: #{album.release_date.strftime('%m/%d/%Y')}"

	puts
	puts

	puts "Tracks"
	longest_track_name = album.tracks.collect(&:name).sort { |x, y| y.length <=> x.length }.first.length
	puts "=" * longest_track_name
	album.tracks.each { |t| puts t.name }
	
==Artists
	
	artist = Scrobbler::Artist.new('Carrie Underwood')

	puts 'Top Tracks'
	puts "=" * 10
	artist.top_tracks.each { |t| puts "(#{t.reach}) #{t.name}" }

	puts

	puts 'Similar Artists'
	puts "=" * 15
	artist.similar.each { |a| puts "(#{a.match}%) #{a.name}" }
	
==Tags	
	
	tag = Scrobbler::Tag.new('country')

	puts 'Top Albums'
	tag.top_albums.each { |a| puts "(#{a.count}) #{a.name} by #{a.artist}" }

	puts

	puts 'Top Tracks'
	tag.top_tracks.each { |t| puts "(#{t.count}) #{t.name} by #{t.artist}" }
	
==Tracks
	
	track = Scrobbler::Track.new('Carrie Underwood', 'Before He Cheats')
	puts 'Fans'
	puts "=" * 4
	track.fans.each { |u| puts "(#{u.weight}) #{u.username}" }
	
== Token Authentication (for Scrobbling)

1. Step: open http://www.last.fm/api/auth/?api_key={YOUR_API_KEY}&amp;cb={YOUR_RETURN_URL}
2. Step: if the user excepts, lastfm will redirect to YOUR_RETURN_URL?token=TOKEN
3. Get the token and call 
    
    new Scrobbler::Auth(token).session 

4. Store the session.key and session.username returned. The session.key will not expire. It is save to store it into your database.

5. Use this token to authentificate with this class :

    auth = Scrobbler::TokenAuth.new({:username => 'chunky', :token => 'bacon'})
    auth.handshake!


== Scrobbling

    scrobble = Scrobbler::Scrobble.new(:session_id => auth.session_id,
                                       :submission_url => auth.submission_url,
                                       :artist => 'Coldplay',
                                       :track => 'Viva La Vida',
                                       :album => "Viva La Vida",
                                       :time => Time.new,
                                       :length => 244,
                                       :track_number => 7)
    scrobble.submit!
    puts "Scrobbler Submission Status: #{scrobble.status}"

== Now Playing Submission

    playing = Scrobbler::Playing.new(:session_id => auth.session_id,
                                     :now_playing_url => auth.now_playing_url,
                                     :artist => 'Anberlin',
                                     :track => 'Readyfuels',
                                     :album => 'Blueprints For the Black Market',
                                     :length => 218,
                                     :track_number => 1)

    playing.submit!         
    puts "Playing Submission Status: #{playing.status}"
    
== Docs

http://rdoc.info/projects/jnunemaker/scrobbler